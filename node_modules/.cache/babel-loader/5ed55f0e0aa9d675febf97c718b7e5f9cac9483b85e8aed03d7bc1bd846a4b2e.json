{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Max\\\\Documents\\\\CODER\\\\ReactJS\\\\EcommerceFinal\\\\ecommercefinal\\\\src\\\\contexts\\\\CartContext\\\\CartContext.jsx\",\n  _s = $RefreshSig$();\nimport { createContext, useState } from \"react\";\nimport Swal from \"sweetalert2\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Context = /*#__PURE__*/createContext();\nconst CartContext = ({\n  children\n}) => {\n  _s();\n  const [cart, setCart] = useState([]);\n\n  /**\r\n   * * addItem()\r\n   * If the item is already in the cart, add the quantity to the existing quantity, otherwise add the item to the cart.\r\n   * @param {object} item\r\n   * @param {number} quantity\r\n   */\n  const addItem = (item, quantity) => {\n    const before = isInCart(item.id);\n    if (before) {\n      const arr = cart.filter(e => e.id !== item.id);\n      item.quantity = quantity + before.quantity;\n      arr.push(item);\n      setCart(arr);\n    } else {\n      item.quantity = quantity;\n      setCart([...cart, item]);\n      Swal.fire({\n        position: \"center\",\n        icon: \"success\",\n        title: `You add ${quantity} Items to Cart`,\n        showConfirmButton: false,\n        timer: 1500\n      });\n    }\n  };\n\n  /**\r\n   * * removeItem()\r\n   * Remove the item from the cart if the item's order is not equal to the itemId.\r\n   * @param {number} itemId\r\n   */\n  const removeItem = itemId => {\n    setCart(cart.filter(e => e.id !== itemId));\n  };\n\n  /**\r\n   * * clear()\r\n   * The clear function is a function that sets the cart to an empty array.\r\n   */\n  const clear = () => {\n    if (cart !== 0) {\n      Swal.fire({\n        title: \"Estás seguro?\",\n        text: \"Esta acción no podrá ser revertida!\",\n        icon: \"warning\",\n        showCancelButton: true,\n        confirmButtonColor: \"#3085d6\",\n        cancelButtonColor: \"#d33\",\n        cancelButtonText: \"Cancelar\",\n        confirmButtonText: \"Si, vaciar carrito!\"\n      }).then(result => {\n        if (result.isConfirmed) {\n          Swal.fire({\n            title: \"Vaciado!\",\n            text: \"El carrito fue vaciado con éxito!\",\n            icon: \"success\",\n            confirmButtonColor: \"#3085d6\"\n          });\n          setCart([]);\n        }\n      });\n    } else {\n      Swal.fire({\n        icon: \"error\",\n        title: \"¡El carrito está vacío!\",\n        showConfirmButton: false,\n        timer: 1500\n      });\n    }\n  };\n\n  /**\r\n   * * isInCart()\r\n   * is a function that takes an itemId as an argument and returns a boolean value based on whether or not the itemId is found in the cart array.\r\n   * @returns The function isInCart is returning a boolean value.\r\n   * @param {number} itemId\r\n   */\n  const isInCart = itemId => {\n    return cart.find(e => e.id === itemId);\n  };\n\n  /**\r\n   * * total()\r\n   * The total function iterates through the cart array and adds the price of each item multiplied by the quantity of each item to the total variable.\r\n   * @returns The total price of all items in the cart.\r\n   */\n  const total = () => {\n    let tot = 0;\n    cart.forEach(item => {\n      tot = tot + item.price * item.quantity;\n    });\n    return tot;\n  };\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: {\n      addItem,\n      cart,\n      clear,\n      removeItem,\n      total\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n};\n_s(CartContext, \"ZqFaEIYkzI5UoYUmTgmqHbYYm/0=\");\n_c = CartContext;\nexport default CartContext;\nvar _c;\n$RefreshReg$(_c, \"CartContext\");","map":{"version":3,"names":["createContext","useState","Swal","jsxDEV","_jsxDEV","Context","CartContext","children","_s","cart","setCart","addItem","item","quantity","before","isInCart","id","arr","filter","e","push","fire","position","icon","title","showConfirmButton","timer","removeItem","itemId","clear","text","showCancelButton","confirmButtonColor","cancelButtonColor","cancelButtonText","confirmButtonText","then","result","isConfirmed","find","total","tot","forEach","price","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Max/Documents/CODER/ReactJS/EcommerceFinal/ecommercefinal/src/contexts/CartContext/CartContext.jsx"],"sourcesContent":["import { createContext, useState } from \"react\";\r\nimport Swal from \"sweetalert2\";\r\n\r\nexport const Context = createContext();\r\n\r\nconst CartContext = ({ children }) => {\r\n  const [cart, setCart] = useState([]);\r\n\r\n  /**\r\n   * * addItem()\r\n   * If the item is already in the cart, add the quantity to the existing quantity, otherwise add the item to the cart.\r\n   * @param {object} item\r\n   * @param {number} quantity\r\n   */\r\n  const addItem = (item, quantity) => {\r\n    const before = isInCart(item.id);\r\n    if (before) {\r\n      const arr = cart.filter((e) => e.id !== item.id);\r\n      item.quantity = quantity + before.quantity;\r\n      arr.push(item);\r\n      setCart(arr);\r\n    } else {\r\n      item.quantity = quantity;\r\n      setCart([...cart, item]);\r\n      Swal.fire({\r\n        position: \"center\",\r\n        icon: \"success\",\r\n        title: `You add ${quantity} Items to Cart`,\r\n        showConfirmButton: false,\r\n        timer: 1500,\r\n      });\r\n    }\r\n  };\r\n\r\n  /**\r\n   * * removeItem()\r\n   * Remove the item from the cart if the item's order is not equal to the itemId.\r\n   * @param {number} itemId\r\n   */\r\n  const removeItem = (itemId) => {\r\n    setCart(cart.filter((e) => e.id !== itemId));\r\n  };\r\n\r\n  /**\r\n   * * clear()\r\n   * The clear function is a function that sets the cart to an empty array.\r\n   */\r\n  const clear = () => {\r\n    if (cart !== 0) {\r\n      Swal.fire({\r\n        title: \"Estás seguro?\",\r\n        text: \"Esta acción no podrá ser revertida!\",\r\n        icon: \"warning\",\r\n        showCancelButton: true,\r\n        confirmButtonColor: \"#3085d6\",\r\n        cancelButtonColor: \"#d33\",\r\n        cancelButtonText: \"Cancelar\",\r\n        confirmButtonText: \"Si, vaciar carrito!\",\r\n      }).then((result) => {\r\n        if (result.isConfirmed) {\r\n          Swal.fire({\r\n            title: \"Vaciado!\",\r\n            text: \"El carrito fue vaciado con éxito!\",\r\n            icon: \"success\",\r\n            confirmButtonColor: \"#3085d6\",\r\n          });\r\n          setCart([]);\r\n        }\r\n      });\r\n    } else {\r\n      Swal.fire({\r\n        icon: \"error\",\r\n        title: \"¡El carrito está vacío!\",\r\n        showConfirmButton: false,\r\n        timer: 1500,\r\n      });\r\n    }\r\n  };\r\n\r\n  /**\r\n   * * isInCart()\r\n   * is a function that takes an itemId as an argument and returns a boolean value based on whether or not the itemId is found in the cart array.\r\n   * @returns The function isInCart is returning a boolean value.\r\n   * @param {number} itemId\r\n   */\r\n  const isInCart = (itemId) => {\r\n    return cart.find((e) => e.id === itemId);\r\n  };\r\n\r\n  /**\r\n   * * total()\r\n   * The total function iterates through the cart array and adds the price of each item multiplied by the quantity of each item to the total variable.\r\n   * @returns The total price of all items in the cart.\r\n   */\r\n  const total = () => {\r\n    let tot = 0;\r\n    cart.forEach((item) => {\r\n      tot = tot + item.price * item.quantity;\r\n    });\r\n    return tot;\r\n  };\r\n\r\n  return (\r\n    <Context.Provider value={{ addItem, cart, clear, removeItem, total }}>\r\n      {children}\r\n    </Context.Provider>\r\n  );\r\n};\r\n\r\nexport default CartContext;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}